{
  "hash": "aef7da40d0a41b336fd872a79fc1d83a",
  "result": {
    "markdown": "# Matrix Operations: Row and Column Sums\n\n\n\n\n\n## Row Sums\n\nOnce we have constructed a matrix, we can do various numerical operations on the matrix to compute all kinds of exciting things. Perhaps the most basic operation that we can do on a matrix is compute its **row sums** and its **column sums**. \n\n\n::: {#tbl-exmat .cell .tbl-cap-location-margin tbl-cap='A Matrix.'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n   <td style=\"text-align:center;\"> 9 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 9 </td>\n   <td style=\"text-align:center;\"> 9 </td>\n   <td style=\"text-align:center;\"> 9 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 9 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 9 </td>\n   <td style=\"text-align:center;\"> 9 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nConsider the matrix shown in @tbl-exmat. This matrix is of dimensions $5 \\times 5$ meaning it has five rows and five columns. Let's call the matrix $\\mathbf{B}$. \n\nThe **row sums** of $\\mathbf{B}$ is written:\n\n$$\n\\sum_i b_{ij}\n$$ {#eq-rowsums}\n\nThis is called **sigma notation**. In this formula *i* refers to the rows of the matrix and *j* refers to the columns. So the formula says, \"to get the row sums, pick a row *i*, and sum the cells across the columns *j*.\" So for instance, if $i = 2$, then @eq-rowsums turns into:\n\n$$\n\\sum_2 b_{2j} = 4 + 6 + 9 + 5 + 3 = 27\n$$ {#eq-rowex}\n\nNote that the numbers in the sum are just the number in row two of @tbl-exmat. The same goes for all the other rows. Note that if we do the row sums of all the rows in the matrix, the result is a **row sum vector**, containing the total sum for the numbers in each row. \n\nThe row sum vector for @tbl-exmat is:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 19 </td>\n   <td style=\"text-align:center;\"> 27 </td>\n   <td style=\"text-align:center;\"> 38 </td>\n   <td style=\"text-align:center;\"> 24 </td>\n   <td style=\"text-align:center;\"> 37 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nThe first number corresponds to the row sums of the first row, the second to the rows sums of the second row, and so forth. \n\n## Column Sums\n\nThe **column sums** of a matrix work pretty much the same way. In sigma notation the column sum for matrix $\\mathbf{B}$ is written as:\n\n$$\n\\sum_j b_{ij}\n$$ {#eq-colsums}\n\nNote that the main difference between @eq-colsums and @eq-rowsums is the subscript under the $\\sum$ symbol, which is *j* instead of *i*. @eq-colsums says: \"to get the column sums, pick a column, and then sum each number down the rows.\" \n\nSo for instance, if $j = 3$, then @eq-colsums turns into:\n\n$$\n\\sum_3 b_{i3} = 2 + 9 + 9 + 3 + 7 = 30\n$$ {#eq-colex}\n\nThe column sum vector for @tbl-exmat is:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 30 </td>\n   <td style=\"text-align:center;\"> 32 </td>\n   <td style=\"text-align:center;\"> 30 </td>\n   <td style=\"text-align:center;\"> 27 </td>\n   <td style=\"text-align:center;\"> 26 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nThe first number corresponds to the column sums of the first column, the second to the column sums of the second column, and so forth. \n\n## Row and Column Sums of the Symmetric Adjacency Matrix\n\nWhat happens if we calculate the row and column sum vectors of a symmetric adjacency matrix corresponding to an undirected graph? \n\nLet us go back to the example corresponding to @fig-undirected, whose adjacency matrix is show in @tbl-symmadjmat. The row sum vector of the adjacency matrix is shown in @tbl-symmsums-1, and the column sum vector is shown in @tbl-symmsums-2.\n\n\n\n::: {#tbl-symmsums .cell .tbl-cap-location-margin layout-nrow=\"1\" tbl-cap='Row and column sum vector of the symmetric adjacency matrix for an undirected graph.' tbl-subcap='[\"Row sums of the symmetric adjacency matrix.\",\"Column sums of the symmetric adjacency matrix.\"]'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> A </th>\n   <th style=\"text-align:center;\"> B </th>\n   <th style=\"text-align:center;\"> C </th>\n   <th style=\"text-align:center;\"> D </th>\n   <th style=\"text-align:center;\"> E </th>\n   <th style=\"text-align:center;\"> F </th>\n   <th style=\"text-align:center;\"> G </th>\n   <th style=\"text-align:center;\"> H </th>\n   <th style=\"text-align:center;\"> I </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> A </th>\n   <th style=\"text-align:center;\"> B </th>\n   <th style=\"text-align:center;\"> C </th>\n   <th style=\"text-align:center;\"> D </th>\n   <th style=\"text-align:center;\"> E </th>\n   <th style=\"text-align:center;\"> F </th>\n   <th style=\"text-align:center;\"> G </th>\n   <th style=\"text-align:center;\"> H </th>\n   <th style=\"text-align:center;\"> I </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nNote two things. For the symmetric adjacency matrix, the row and column sums vectors are identical. So we get the same answer whether we sum the numbers for each row across columns, or for each column down the rows. \n\nBut what are these numbers? If you stare at them long enough, you will see that they are familiar, for they are nothing but the undirected graph's **degree set**. So, for an undirected graph, the row *or* column sums of the symmetric adjacency matrix gives us the **degrees** of each node!\n\n## Row and Column Sums of the Asymmetric Adjacency Matrix\n\nNow what happens if we compute the row and column sums for an asymmetric adjacency matrix? We already saw one such matrix in @tbl-asymmadjmat corresponding to @fig-directed. The row and column sums of that adjcency matrix is shown in @tbl-asymmsums-1 and @tbl-asymmsums-2. \n\n\n::: {#tbl-asymmsums .cell .tbl-cap-location-margin layout-nrow=\"1\" tbl-cap='Row and column sum vector of the asymmetric adjacency matrix for a directed graph.' tbl-subcap='[\"Row sums of the asymmetric adjacency matrix.\",\"Column sums of the asymmetric adjacency matrix.\"]'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> A </th>\n   <th style=\"text-align:center;\"> B </th>\n   <th style=\"text-align:center;\"> C </th>\n   <th style=\"text-align:center;\"> D </th>\n   <th style=\"text-align:center;\"> E </th>\n   <th style=\"text-align:center;\"> F </th>\n   <th style=\"text-align:center;\"> G </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-hover table-condensed table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> A </th>\n   <th style=\"text-align:center;\"> B </th>\n   <th style=\"text-align:center;\"> C </th>\n   <th style=\"text-align:center;\"> D </th>\n   <th style=\"text-align:center;\"> E </th>\n   <th style=\"text-align:center;\"> F </th>\n   <th style=\"text-align:center;\"> G </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nNote that in contrast to the symmetric case, the row and column sum vectors of the asymmetric adjacency matrix corresponding to a  directed graph are *different*. What's the difference?\n\nWell if you stare at them long enough, it might dawn on you that the row sum vector corresponds to the directed graph's **outdegree set**, and the column sum vector corresponds to the directed graph's **indegree set**. \n\nSo in the directed case, each of the sum operations that we can perform on the asymmetric adjacency matrix captures a separate graph property, in this case the difference between each node's **indegree** (given by the **row sums**) and each node's **outdegree** (given by the **column sums**). Neat!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}