---
title: "Directed Graph Metrics"
---

```{r setup, include=FALSE}
    require(ggraph)
    require(tidygraph)
    require(igraph)
    require(kableExtra)
    require(patchwork)
```

There are a number of graph metrics that makes the most sense to compute in **directed graphs**. In this lesson, we discuss the most important ones.

## The Dyad Census
```{r}
#| label: fig-direx1
#| fig-cap: "A directed graph."
#| fig-cap-location: margin
#| fig-width: 9
#| fig-height: 9

    set.seed(359)
    gr <- play_erdos_renyi(n = 7, m = 18)
    gr <- mutate(gr, name = toupper(letters[1:7])) 
    p <- ggraph(gr, layout = 'auto')
    p <- p + geom_edge_parallel(color = "steelblue", edge_width = 1.25,
                                arrow = arrow(length = unit(6, 'mm')),
                                end_cap = circle(10, 'mm'), 
                                sep = unit(9, 'mm'))
    p <- p + geom_node_point(aes(x = x, y = y), size = 22, color = "tan2") 
    p <- p + geom_node_text(aes(label = name), size = 12, color = "white")
    p <- p + theme_graph() 
    p
```

When examining the structure of a social network composed of asymmetric edges, and represented as a directed graph, we may be interested in counting how many dyads of each type (**mutual**, **asymmetric**, and **null**) exist in the whole graph. This graph metric is called the **dyad census**. For instance, if we were to perform the dyad census on the graph shown in @fig-direx1 we would end up with:

```{r}
#| label: tbl-dyad-census
#| tbl-cap: "Dyad census of a directed graph."
#| tbl-cap-location: margin

    set.seed(359)
    gr <- play_erdos_renyi(n = 7, m = 18)
    gr <- mutate(gr, name = toupper(letters[1:7])) 
    dc <- dyad_census(gr)
    dc <- t(as.matrix(dc))
    colnames(dc) <- c("Mutual", "Asymmetric", "Null")
    kbl(dc, format = "pipe", align = "c") 
```
 
The dyad census tells us that out of all the connected dyads in @fig-direx1, four of them are mutual: $\{BD, CG, DE, FE\}$, and ten of them are asymmetric: $\{AC, AE, BC, DF, EG, DF, EG, FA, FB, FG\}$. 

The number of mutual dyads in a directed graph is represented by the symbol $L^\leftrightarrow$. The number of asymmetric dyads, on the other hand is represented by the symbol $L^\rightarrow$. Note that the cardinality of the edge set $|E|$ (a.k.a. the total number of edges) in a directed graph is therefore:

$$
    |E| = 2L^\leftrightarrow + L^\rightarrow
$$

Remember, we multiply the number of mutual dyads by two, because each mutual dyad is composed of two directed edges!

In the same way, the total number of **connected dyads** ($L$) in a directed graph is:

$$
    L = L^\leftrightarrow + L^\rightarrow
$$

### Advanced topic: Mechanics of the dyad census
Where the numbers in @tbl-dyad-census) come from? Well, it turns out that they can be readily computed from the **asymmetric adjacency matrix** ($A$)of the corresponding directed graph. The one corresponding to @fig-direx1 is shown as @tbl-adj1.

```{r}
#| label: tbl-adj1
#| tbl-cap: "Asymmetric adjancency matrix of a directed graph."
#| tbl-cap-location: margin

    set.seed(359)
    gr <- play_erdos_renyi(n = 7, m = 18)
    gr <- mutate(gr, name = toupper(letters[1:7]))
    A <- as.matrix(as_adjacency_matrix(gr))
    diag(A) <- "--"
    kbl(A, format = "pipe")
```

To find out the number of mutual dyads ($L^\leftrightarrow$) all we need to do is cycle through the lower triangle of the matrix (cells below the main diagonal), and compute the product of that cell and the corresponding symmetric cell on the upper triangle (cells above the main diagonal).^[In a matrix, if you have a cell with row and column subscripts $a_{4, 3}$, which says "the cell corresponding to row four and column three", then the **symmetric cell** is the one with the row and column subscripts switched around: $a_{3, 4}$, which says "the cell corresponding to row three and column four."]

In matrix format:

$$
  L^\leftrightarrow = \sum_{i>j} a_{ij}a_{ji}
$$ {#eq-mutual}

Where the subscript below $\sum$ says to sum through the cells where the row subscript *i* is always larger than the column subscript *j* (lower triangle). The product of $a_{ij}a_{ji}$ will only equals one if the edges go in both directions $a_{ij} = 1,  a_{ji} = 1$, and the sum will equal the number of mutual dyads $L^\leftrightarrow$.

Once we have $L^\leftrightarrow$ we can figure out $L^\rightarrow$, the number of asymmetric dyads, using the formula (from @wasserman_faust94, p. 512):

$$
  L^\rightarrow = \sum_i \sum_j a_{ij} - 2L^\leftrightarrow
$$ {#eq-asymm}

Where the double $\sum$ indicates that we are summing through *all* the cells in the adjacency matrix (essentially counting all the cells that have a one in the matrix) and are subtracting twice the number of mutuals (because these dyads contribute two directed links each).

## Advanced Topic: The Triad Census
```{r triad-census}
#| label: tbl-triad-census
#| tbl-cap: "Triad census of a directed graph."
#| tbl-cap-location: margin

    set.seed(359)
    gr <- play_erdos_renyi(n = 7, m = 18)
    tc <- triad_census(gr)
    names(tc) <- c("NNN", "NNA", "NNM", "AAN(O)", "AAN(I)", "AAN(L)", "MAN(I)", "MAN(O)", "AAA(I/O)", "AAA(C)", "MMN", "MAA(O)", "MAA(I)", "MAA(C)", "MMA", "MMM")
    kbl(tc, format = "pipe", col.names = c("Count")) 
```

Just like we did in the case of directed dyads, it is possible to go through a directed graph and count the number of directed triadic motifs. This is called the **triad census** and was developed by sociologists and mathematicians working together in the 1970s [@davis_leinhardt72]. For instance, if we were to perform the triad census on the graph shown in @fig-direx1 we would end up with the counts shown in @tbl-triad-census). For your reference, the sixteen triadic configurations are shown in @fig-dirtriads.

## Graph Reciprocity
Recall from our discussion in the lesson of types of graphs, that asymmetric relations in a directed graph have an important property that symmetric relations in an undirected graph lack: **Reciprocity**. That is, connected dyads in directed graphs can be either **mutual** (with directed edges going in both directions) or **asymmetric** with (with directed edges going only in one direction). So for instance, in the graph shown in @fig-direx1 the connected $BD$ dyad is mutual, but the $FB$ dyad is asymmetric. 

```{r}
#| label: fig-direx2
#| fig-cap: "Another directed graph."
#| fig-cap-location: margin
#| fig-width: 9
#| fig-height: 9

    set.seed(359)
    gr <- play_erdos_renyi(n = 7, m = 12)
    gr <- mutate(gr, name = toupper(letters[1:7])) 
    p <- ggraph(gr, layout = 'kk')
    p <- p + geom_edge_parallel(color = "steelblue", edge_width = 1.25,
                                arrow = arrow(length = unit(6, 'mm')),
                                end_cap = circle(10, 'mm'), 
                                sep = unit(9, 'mm'))
    p <- p + geom_node_point(aes(x = x, y = y), size = 22, color = "tan2") 
    p <- p + geom_node_text(aes(label = name), size = 12, color = "white")
    p <- p + theme_graph() 
    p
```

In some applications we may be interested in Figuring out the extent to which the *whole graph* is more or less likely to contain mutual as opposed to asymmetric dyads. This metric is called **Graph Reciprocity** and is usually written as $R(G)$. For instance, if we compare the graph shown in @fig-direx1 to the one shown in @fig-direx2 it seems like there's much more reciprocity going in @fig-direx1 than in @fig-direx2. How can we quantify it?

Well, the count of the different types of directed dyads provided by the dyad census in @tbl-dyad-census) provide us with the information we need. Accordingly, if we wanted to quantify the *amount* of reciprocity in the graph shown in @fig-direx1, we could do it by computing the following ratio [@krackhardt94]:

$$
    R(G) = \frac{L^\leftrightarrow}{L}
$$ {#eq-lratio}

In our example, this would be: 
$$
    R(G) = \frac{4}{4 + 10} = \frac{4}{14} = 0.29
$$

Note that in a graph in which *all* dyads are mutual ($L^\rightarrow =0$), then $R = \frac{L^\leftrightarrow}{L^\leftrightarrow} = 1$, the theoretical maximum of graph reciprocity. Conversely, a graph with no mutual dyads, $L^\leftrightarrow = 0$, then $R = 0$. For instance, a **tree graph** composed of all anti-symmetric edges (which by definition cannot be mutual), will always have $R=0$.

```{r dyad-census2}
#| label: tbl-dyad-census2
#| tbl-cap: "Dyad census of a directed graph."
#| tbl-cap-location: margin

    set.seed(359)
    gr <- play_erdos_renyi(n = 7, m = 12)
    dc <- dyad_census(gr)
    dc <- t(as.matrix(dc))
    colnames(dc) <- c("Mutual", "Asymmetric", "Null")
    kbl(dc, format = "pipe", align = "c") 
```

The dyad census corresponding to the directed graph shown in @fig-direx2 is shown in @tbl-dyad-census2). Can you figure out the graph reciprocity?

## Graph Connectedness
Recall that in our discussion of indirect relationships, we found that paths work differently in undirected versus directed graphs. In an undirected graph, if we know the graph is connected (it is not split into separate components), then we also know that every node can reach every other node via a an undirected path of some length, even if that path is very long. The reason is that undirected paths are *symmetric*: In an undirected graph, if a path exists with node *A* as source and node *B* as destination, then necessarily a path also exists with node *B* as source and node *A* as destination. In an undirected graph that is also connected, all nodes are **mutually reachable** by construction.

In a directed graph, things work differently. Directed paths are asymmetric. This means that In a directed graph, a path may have node *A* as source and node *B* as destination. However, this does not necessarily mean a path also exists with node *B* as source and node *A* as destination. It could (in which case the two nodes are strongly connected), but it could also not (in which case the nodes are only unilaterally connected). This means that in a directed graph, connectivity is a matter of more or less rather than all or none as it is in the undirected case.

This means that we can compute a metric telling us the extent to which a directed graph is connected. To do this, we can use the **reachability matrix** as we defined it in the lesson on social network matrices. Recall that the reachability matrix **R** is a square matrix with the nodes on the row and columns. Each cell of the reachability contains a $r_{ij} = 1$ if node *i* can reach node *j* and a $r_{ij} = 0$ otherwise. 

Consider for instance the graph shown in @fig-direx1. The corresponding reachability matrix is shown as @tbl-reachmat1.

```{r}
#| label: tbl-reachmat1
#| tbl-cap: "Reachability matrix for a directed graph."
#| tbl-cap-location: margin

  set.seed(359)
  gr <- play_erdos_renyi(n = 7, m = 18)
  gr <- mutate(gr, name = toupper(letters[1:7])) 
  r <-distances(gr, mode = "out")
  r <- ifelse(r == Inf, 0, 1)
  diag(r) <- "--"
  kbl(r, format = "pipe")
    r <-distances(gr, mode = "out")
    r <- ifelse(r == Inf, 0, 1)
    diag(r) <- 0
    n <- graph_from_adjacency_matrix(r, mode = "directed")
    1 - reciprocity(n, mode = "ratio")
```

Every zero in the reachability matrix represents an actor who cannot reach another actor. These are "gaps" of reachability in the social system which may impair efficiency, coordination, and adaptability in the group [@krackhardt94]. The less zeroes there are in the reachability matrix, the more connected the network is. So we can calculate graph connectedness directly from the reachability matrix **R**, just by summing up the value of all the cells of the reachability matrix and dividing this sum by the total number of cells. This can be expressed using the following formula:

$$
  C = \frac{\sum_i \sum_j r_{ij}}{N(N-1)}
$$ {#eq-connect}

Where the double $\sum$ like in @eq-asymm indicates summing across all the cells in the matrix, and $N(N-1)$ is the number of (non-diagonal) cells. A reachability matrix corresponding to a graph with no connectedness violations will have a numerator that is equal total number of cells in the matrix (which is the same as the number of edges of the corresponding **complete graph** of the same order). A graph with some connectedness violations where the sum of the cells ($\sum_i\sum_j r_{ij}$) is less than $N(N-1)$ will have a connectedness score between zero and one. 

For instance, for the reachability matrix shown in @tbl-reachmat1, the numerator in the fraction corresponding to @eq-connect is: 

$$
  \sum_i \sum_j r_{ij} = 32
$$

The denominator is: 
$$
  N(N-1) = 7 \times (7 - 1) = 42
$$

And the graph connectedness score is: 

$$
  C = \frac{32}{42} = 0.76
$$

Which tells us that while not a perfect $1.0$, @fig-direx1 is still a pretty well-connected social network!

## Graph Hierarchy
In a hierarchical social structure, things (like commands, orders, authority, and influence) tend to flow in **one direction**: From the boss to the middle manager, from the general to the lieutenant, from the parent to the child. The tree graph we considered before, full of **anti-symmetric** links going in one direction only, is thus the perfect model of a purely hierarchical structure in social networks. One version is shown in @fig-treegrgr.

```{r}
#| label: fig-treegrgr
#| fig-cap: "A tree graph."
#| fig-cap-location: margin
#| fig-height: 6
#| fig-width: 6

fr <- c("A", "A", "B", "B", "C", "C")
to <- c("B", "C", "D", "E", "F", "G")
edge.dat <- data.frame(fr, to)
node.dat <- data.frame(name = union(fr, to))
gr <- tbl_graph(edges = edge.dat, nodes = node.dat)
p <- ggraph(gr, layout = 'tree')
p <- p + geom_edge_link(color = "steelblue", edge_width = 1.25,
                        arrow = arrow(length = unit(6, 'mm')),
                        end_cap = circle(6, 'mm'))
p <- p + geom_node_point(aes(x = x, y = y), size = 16, color = "tan2") 
p <- p + geom_node_text(aes(label = name), size = 8, color = "white")
p <- p + theme_graph() 
p
```

In @tbl-reachmat1, we derived the corresponding reachability matrix for that directed graph. Now let us do the same, but this time for a tree graph describing hierarchical anti-symmetric relations like the one shown in @fig-treegrgr. @tbl-treereachmat shows the results.

```{r}
#| label: tbl-treereachmat
#| tbl-cap: "Reachability matrix for an anti-symmetric tree graph."
#| tbl-cap-location: margin

  fr <- c("A", "A", "B", "B", "C", "C")
  to <- c("B", "C", "D", "E", "F", "G")
  edge.dat <- data.frame(fr, to)
  node.dat <- data.frame(name = union(fr, to))
  gr <- tbl_graph(edges=edge.dat, nodes=node.dat, directed = TRUE)
  r <-distances(gr, mode = "out")
  r <- ifelse(r == Inf, 0, 1)
  gr <- graph_from_adjacency_matrix(r, mode = c("directed"))
  diag(r) <- "--"
  kbl(r, format = "pipe")
  1 - reciprocity(gr, mode = "ratio")
```
  
One interesting thing to observe about the reachability matrix shown in @tbl-treereachmat is that it only has non-zero entries above the diagonal, in what we called the **upper triangle** of the matrix in the lesson on network matrices. Recall this are cells in which the row index *i* is always smaller than the column index *j*. You can see for yourself that all the cells in which the row index is larger than the column index (the **lower triangle** of the matrix) are indeed all zero. 

The other thing to observe is that the reachability matrix of a tree graph *encodes the authority or hierarchical structure of the tree graph*. This is easy to see by the fact that the row corresponding to the "top" node (*A*) is full of ones. This says that this node can reach every other node in the graph via some path. So if this was the general in an army, they could influence every other node, by giving an order to the people directly connected to them (e.g., *B*, or *C*) and then they would pass it down to the others. 

Now if we look at *A*'s *column*, we see that it is full of zeroes, indicating that while *A* can reach everybody, no one can reach them back. The same goes for every level; the nodes at the top can reach the ones at the bottom, but they can't reach them back. This is why the lower triangle of the matrix has to be made up of all zeroes, and why it encodes the idea that in a tree, things only flow in one direction (downwards, from the top to the bottom).


```{r}
#| label: fig-rectree
#| fig-cap: "An asymmetric graph arranged as a tree."
#| fig-cap-location: margin
#| fig-width: 6
#| fig-height: 6

    fr <- c("A", "A", "B", "B", "C", "C", "B", "D", "G")
    to <- c("B", "C", "D", "E", "F", "G", "A", "B", "C")
    edge.dat <- data.frame(fr, to)
    node.dat <- data.frame(name = union(fr, to))
    gr <- tbl_graph(edges = edge.dat, nodes = node.dat)
    p <- ggraph(gr, layout = 'tree')
    p <- p + geom_edge_parallel(color = "steelblue", edge_width = 1.25,
                            arrow = arrow(length = unit(6, 'mm')),
                            end_cap = circle(10, 'mm'), 
                            sep = unit(6, 'mm'))
    p <- p + geom_node_point(aes(x = x, y = y), size = 16, color = "tan2") 
    p <- p + geom_node_text(aes(label = name), size = 8, color = "white")
    p <- p + theme_graph() 
    p
```

Now let's break the anti-symmetry principle and add some reciprocal directed ties to the network shown in @fig-treegrgr, keeping the same set of nodes. This transforms the graph from an anti-symmetric to an asymmetric one. The new graph is shown as @fig-rectree. In this network, node *B* sends a reciprocal link to *A*, node *D* sends a reciprocal link to *B*, and *G* reciprocates their tie to **C*. The reachability matrix for this graph, is shown in @tbl-asymmreachmat.

```{r}
#| label: tbl-asymmreachmat
#| tbl-cap: "Reachability matrix for an asymmetric graph."
#| tbl-cap-location: margin

    fr <- c("A", "A", "B", "B", "C", "C", "B", "D", "G")
    to <- c("B", "C", "D", "E", "F", "G", "A", "B", "C")
    edge.dat <- data.frame(fr, to)
    node.dat <- data.frame(name = union(fr, to))
    gr <- tbl_graph(edges=edge.dat, nodes=node.dat, directed = TRUE)
    r <-distances(gr, mode = "out")
    r <- ifelse(r == Inf, 0, 1)
    gr <- graph_from_adjacency_matrix(r, mode = c("directed"))
    diag(r) <- "--"
    kbl(r, format = "pipe")
    1 - reciprocity(gr, mode = "ratio")
```

Note that one big difference between @tbl-treereachmat and @tbl-asymmreachmat is that @tbl-asymmreachmat now features some non-zero entries in the lower-triangle. So it seems like the lower triangle in the reachability matrix of an asymmetric graph, records *anti-symmetry violations*. 

Another big difference between @tbl-treereachmat and @tbl-asymmreachmat is that now nodes *B* and *D*, like *A* in the original tree graph, can reach everybody else in the network. They can do that because now they can reach *A*, and since *A* could reach everyone initially, they can do so through that node.

Thus, if we think of the tree graph as representing a purely *hierarchical* structure, in which authority, influence, orders, and so forth only flow in one direction, then the addition of reciprocity into the structure can be seen as a relaxation of the hierarchy principle. In @fig-rectree *A* doesn't just influence or order *B* around in a unidirectional way like they do in @fig-treegrgr, *B* can "talk back", or exert influence upon *A* and so forth. So by adding asymmetric reciprocal links, we have made the graph less hierarchical. 

This insight can be taken as motivation to develop a graph metric called **graph hierarchy** [@krackhardt94]. The measure is simple. It is equal to the number of **unilaterally reachable** ($U^r$) pairs of nodes in the graph to the total number of **connected pairs** in the graph ($E^r$). The total number of connected pairs, in turn is given by the sum of mutually reachable ($M^r$) and unilaterally connected ($U^r$) pairs.

$$
    H(G) = \frac{U^r}{M^r + U^r}
$$ {#eq-hier}

The graph hierarchy ($H(G)$) score in @eq-hier is maximized ($H(G) = 1$) when there are no mutually reachable connected pairs in the graph ($M^r = 0$). It is at its minimum ($H(G) = 0$) when all the connected pairs are mutually reachable $U^r = 0$. Note that this ratio is similar measure of **reciprocity** for non-valued directed graphs discussed earlier, but applied to the reachability matrix instead of the adjacency matrix [@krackhardt94]. Except that here we are interested in non-reciprocal (unilateral) relations in the reachability matrix not the adjacency matrix. Like before, we can find out $M^r$ by using a variation of @eq-mutual but applied to the reachability matrix instead of the adjacency matrix:

$$
  M^r = \sum_{i>j} r_{ij}r_{ji}
$$ {#eq-mutualreach}


Where the subscript below $\sum$ says to sum through the cells where the row subscript *i* is always larger than the column subscript *j* (lower triangle of the reachability matrix). The product of $r_{ij}r_{ji}$ will only equal one if two nodes are *i* and *j* are mutualy reachable $r_{ij} = 1,  r_{ji} = 1$, and the sum will equal the number of mutually reachable dyads in the graph $M^r$.

Once we have $M^r$ we can figure out $U^r$, the number of unilaterally connected dyads, using a variation of @eq-asymm:

$$
  A = \sum_i \sum_j r_{ij} - 2M^r
$$   {#eq-unireach}


Recall that we know that a reachability relation is unilateral, just in case every time a node *A* can reach a node *B* then *B* is unable reach *A* via a directed path in the graph. The tree graph has that property for all pairs of nodes. This implies that tree graphs display maximum graph hierarchy: In a tree graph, $M^r = 0$ and  therefore $H(G) = 1.0$. A completely reciprocal reachability matrix, on the other hand, where every pair of nodes is mutually reachable, implies minimum graph hierarchy, with $H(G) = 0$. 

Applying @eq-hier to the tree graph shown in @fig-treegrgr gives us the expected value of $1.0$, but applying the same equation to the asymmetric graph shown in @fig-rectree gives us the value of $H(G) = 0.77$, which is pretty high, but also shows that this network structure is less hierarchical than the pure anti-symmetric tree. Overall, the closer to zero the $H(G)$ score is, the less hierarchical the structure. For instance, the graph hierarchy score corresponding to the graph shown in @fig-direx1 is $H(G) = 0.47$, showing that this network is even less hierarchical than the one shown in @fig-rectree.

## Graph Efficiency
Tree graphs like the one shown in @fig-treegrgr have another interesting property. The number of links in a tree is *always* equal to the number of nodes minus one! That is, in a tree graph $E = N - 1$. You can go back to @fig-treegrgr and check for yourself. We have seven nodes $N$ and six links $E$ and $6 = 7 -1$. That's neat!

```{r}
#| label: fig-treegrmiss
#| fig-cap: "A tree graph that is missing one link."
#| fig-cap-location: margin
#| fig-height: 6
#| fig-width: 6

    fr <- c("A", "A", "B", "B", "C", "C")
    to <- c("B", "C", "D", "E", "F", "G")
    edge.dat <- data.frame(fr, to)
    node.dat <- data.frame(name = union(fr, to))
    gr <- tbl_graph(edges = edge.dat, nodes = node.dat)
    l <- ggraph(gr, layout = 'tree')
    l <- as.matrix(l$data[, 1:2])
    gr <- create_empty(7, directed = TRUE)
    gr <- gr %>% 
        bind_edges(data.frame(from = 1, to = 2:3)) %>% 
        bind_edges(data.frame(from = 2, to = 4)) %>% 
        bind_edges(data.frame(from = 3, to = 6:7)) %>% 
        mutate(name = toupper(letters[1:7]))
    p <- ggraph(gr, layout = l)
    p <- p + geom_edge_link(color = "steelblue", edge_width = 1.25,
                            arrow = arrow(length = unit(6, 'mm')),
                            end_cap = circle(6, 'mm'))
    p <- p + geom_node_point(aes(x = x, y = y), size = 16, color = "tan2") 
    p <- p + geom_node_text(aes(label = name), size = 8, color = "white")
    p <- p + theme_graph() 
    p
```

This means that trees are networks that have the *minimum* number of links to keep them connected. If you remove even *one* node from a tree you create a connectivity gap in the structure, splitting the graph into separate components. Like the one shown in @fig-treegrmiss. After removing the $BE$ link node $E$ becomes isolated from the rest. The same would happen (creating disconnected clumps) if we were to remove any other link from @fig-treegrmiss.

## Advanced topic: Reciprocity in directed weighted graphs
One phenomenon we can better understand using weighted graphs is the idea of reciprocity. Take for instance @fig-dirweighted, which shows a **directed weighted graph**, with the same set of nodes and edges as @fig-directed. Like all directed graphs, we can see that there are three kinds of dyads: **mutual**, **asymmetric** and **null**). This could represent the social network created by the flow of directed communications (e.g., emails or text messages send *from* one person *to* another) in an office or work group.

In unweighted directed graphs, we tend to say that two nodes that are part of a mutual dyad have a reciprocal relationship. So if we were going by a binary (on or off) idea, of reciprocity, we would say that all the mutual dyads in @fig-dirweighted, such as $AB$, $AF$, and $BD$ are reciprocal. But as we said, when it comes to the sort of interactions that are best captured in a weighted graph, reciprocity is a matter of more or less, not all or none. The weights ($w$) provide a richer picture of what's going on in the network. 

### Notation
Let us come up with some notation. In a directed weighted graph, the weight of the directed edge going from source node *A* to source destination node *B* is referred to as $w_{AB}$. In the graph shown in in @fig-dirweighted, $w_{AB} = 17$. If the dyad is mutual, we would refer to the directed edge coming from source node *B* to destination node *A* as $w_{BA}$. As you can see, $w_{BA}=20$.

```{r}
#| label: fig-dirweighted
#| fig-cap: "A directed weighted graph"
#| fig-cap-location: margin
#| fig-height: 9
#| fig-width: 9

    set.seed(3489)
    fr <- c("A", "A", "B", "A", "A", "B", "C", "C", "D", "D", "E", "E", "F", "G", "G", "B")
    to <- c("B", "F", "A", "G", "D", "D", "B", "E", "B", "G", "C", "D", "A", "F", "D", "E")
    w <- round(30*runif(16), 0)
    edge.dat <- data.frame(fr, to)
    node.dat <- data.frame(name = union(fr, to))
    gr <- tbl_graph(edges = edge.dat, nodes = node.dat)
    p <- ggraph(gr, layout = 'mds')
    p <- p + geom_edge_parallel(aes(label = w),
                        angle_calc = 'along', label_size = 4.5,
                        label_dodge = unit(6, 'mm'),
                        color = "steelblue", edge_width = 1.25,
                        arrow = arrow(length = unit(5, 'mm')),
                        end_cap = circle(10, 'mm'), 
                        sep = unit(5, 'mm'))
    p <- p + geom_node_point(aes(x = x, y = y), size = 20, color = "tan2") 
    p <- p + geom_node_text(aes(label = name), size = 8, color = "white")
    p <- p + theme_graph() 
    p
```

Are mutual dyads in a directed weighted graph necessarily "reciprocal"? The answer is no. For instance, in @fig-dirweighted, the relationship between *B* and *D* seems to be very uneven; *B* sent thirty messages to *D* ($w_{BD} = 30$) but *D* only sends two messages back ($w_{BD} = 2$). So we would say that reciprocity definitely seems to be lacking in the $BD$ dyad. 

The relationship between *A* and *B* that we considered earlier, on the hand, seems much more even (twenty versus seventeen) So there is more reciprocity in the $AB$  dyad than there is in the $BD$  dyad even though both dyads are "mutual" going by the unweighted graph criterion. 

Perhaps *B* does not think much of *D* or thinks that *D* is pestering them with too many messages. Lack of weighted reciprocity may be indicative of the quality of the relationship between *B* and *D*. 

### A Measure of Dyadic Reciprocity in Directed Weighted Graphs
Is there a way to quantify the amount of reciprocity in mutual dyads in directed graphs? The answer is yes [@squartini13]. The trick is to separate the amount of interaction in the edge weights ($w$) that is "reciprocal" from the amount that is "non-reciprocal."

For instance, let's go back to the $AB$ dyad in @fig-dirweighted. If these were messages going back and forth, then we would say that *A* and *B* are even in seventeen of those messages. This is called the **reciprocated weight** of the $AB$ mutual dyad. So in a mutual weighted dyad, the reciprocated weight (let's call it $w_{ij}^\leftrightarrow$) will always be equal to the smallest of the two weights! Note this also means that $w_{ij}^\leftrightarrow$ will always be equal to $w_{ji}^\leftrightarrow$.

In equation form:

$$
   w^\leftrightarrow_{ij} = \min(w_{ij}, w_{ji})
$$ {#eq-wrecip}

Where *i* and *j* are just our generic stand ins for any pair of nodes in the graph ${A, B, C...}$, and *min* is the symbol for the mathematical operation of "take the minimum" of a set of numbers (e.g., $\min(1, 2, 3) = 1$ and $\min(10, 100) = 10$). So, $w^\leftrightarrow_{AB} = \min(20,17) = 17$. 

Now, once we have $w^\leftrightarrow_{ij}$, we can compute how much directed non-reciprocity goes from one node to the other. This called the **non-reciprocated weight** of the mutual tie (let's call it $w^\rightarrow_{ij}$). To figure this out, we subtract reciprocated weight from the directed weight going from one node to another:

In equation form:

$$
   w^\rightarrow_{ij} = w_{ij} - w^\leftrightarrow_{ij}
$$ {#eq-wnrecip}

Note that the non-reciprocated weight of the tie will either be equal to zero if the *i* node is the who contributes less to the relationship, or it will be a number larger than zero, if the *i* node is the one who contributes more. So for the $AB$ dyad in @fig-dirweighted, $w^\rightarrow_{AB} = 17 - 17 = 0$ and $w^\rightarrow_{BA} = 20 -17 = 3$.

### A Measure of Graph Reciprocity in Directed Weighted Graphs
Above, we used the **dyad census** to come up with a measure of the extent to which a directed graph is reciprocal, which we called $R(G)$. We can do something similar for the case of directed weighted graphs. Recall that $R(G)$ is just a ratio of the number of mutual dyads $L^\leftrightarrow$ to the total number of directed edges ($E$). In the weighted directed case, we can compute $R^w(G)$, which is a ratio of the *sum of the reciprocated weight of all dyads* to the *total sum of the weights across each directed edge in the graph*.

In equation form:

$$
   R^w(G) = \frac{\sum_i \sum_{i \neq j} w_{ij}^\leftrightarrow}{\sum_i \sum_{i \neq j} w_{ij}}
$$ {#eq-grwrecip}

## References {.unnumbered}