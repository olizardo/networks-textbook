

### Structural Similarity
In most real-world applications, the standard definition of structural equivalence is much too strong. In answer to the question of whether two nodes occupy the same position in the network it only allows for a "yes/no" answer. Yes, if their neighborhoods are *exactly* the same, and "no" if there aren't. 

What we need is a measure of position that allows for "more or less" rather than "yes" and "no." This is what is called **structural similarity** [@leicth_etal06]. Two nodes are structurally similar if they have *similar patterns* of connectivity with the same others. There are various versions of structural similarity between nodes. Here we will consider some popular ones.

## Measuring Structural Similarity Using the Euclidean Distance
Given an adjacency matrix for a graph, how can we find out which nodes are structurally similar without staring at a picture for a long time? A classic way of measuring structural similarity, developed by the sociologist Ronald Burt @burt76 is to use the **Euclidean Distance** between the row vectors corresponding to each node in an adjacency matrix. 

Take for instance @tbl-adjmat1. The row vector for node *A* is $a_{(A)j} = (0, 0, 1, 1, 0, 0)$, and so is the row vector for node *B* $a_{(B)j}$, because we already know they are structurally equivalent! Remember, the row vector is just the entries in each row corresponding to each node in @tbl-adjmat1. So the row vector for node *C* ($a_{(C)j}= (1, 1, 0, 0, 1, 0)$ and so forth. Here the subscript $j$ refers to each column entry of the adjacency matrix $(A, B, C...F)$.

The **Euclidean Distance** between the row row-vectors of two nodes $k$ and $l$ is given by:

$$
d^{Euclid}_{k,l} = \sqrt{\sum_j (a_{(k)j}-a_{(l)j})^2}
$$ {#eq-euclid}

What equation @eq-euclid says is that we take each corresponding entry of the row vectors, subtract them from one another, square them, sum them, and take the square root of the resulting sum. As noted, structurally equivalent nodes will receive a score of zero, while structurally similar nodes will receive scores that are *close* to zero. The *larger* the Euclidean distance between two nodes, the *less* structurally similar they are. 

So let's say we wanted to find out the structural similarity between between nodes *A* and *C* in @tbl-adjmat1 using the Euclidean distance. We would proceed as follows:

- First, get the row vector for node *A* that's $a_{(A)j} = (0, 0, 1, 1, 0, 0)$, as we saw earlier.
- Second, get the row vector for node *C* that's $a_{(C)j}= (1, 1, 0, 0, 1, 0)$, as we saw earlier.
- Third, line them up, so that you can compute the differences and then square them:

```{r}
#| label: tbl-eudist-ex1 
#| tbl-cap: "Euclidean distance calculation."
#| tbl-cap-location: margin

    a <- c(0, 0, 1, 1, 0, 0)
    c <- c(1, 1, 0, 0, 1, 0)
    d <- a-c
    e <- d^2
    c.diff <- c("(0 - 1)", "(0 - 1)", "(1 - 0)", "(1 - 0)", "(0 - 1)", "(0 - 0)")
    t <- matrix(c(a, c, c.diff, d, e), nrow = 5, byrow = TRUE)
    rownames(t) <- c("A", "C", "A - C", "A - C", "(A - C)^2")
    kbl(t, format = "html", align = "c")
```

The Euclidean distance between *A* and *C* is thus the square root of the sum of the numbers in the last row of @tbl-eudist-ex1: $\sqrt{1+1+1+1+1+0} = \sqrt{5}= 2.2$.

As we noted, for structurally equivalent node pairs (which have identical row vectors), the Euclidean distance should reach its minimum value of zero. We can check that by computing the Euclidean distance of nodes *A* and *B* in @tbl-adjmat1:

```{r}
#| label: tbl-eudist-ex2
#| tbl-cap: "Euclidean distance calculation."
#| tbl-cap-location: margin

    a <- c(0, 0, 1, 1, 0, 0)
    d <- a-a
    e <- d^2
    t <- matrix(c(a, a, d, e), nrow = 4, byrow = TRUE)
    rownames(t) <- c("A", "B", "A-C", "(A-C)^2")
    kbl(t, format = "html", align = "c")
```

Indeed since the sum of the last row of the numbers in @tbl-eudist-ex2 is zero, then so will the square root!

### The Structural Similarity Matrix
@tbl-dist1 shows the **structural similarity matrix** ($\mathbf{S}$) produced by computing euclidean distance between of each pair of nodes in the adjacency matrix shown in @tbl-adjmat1 (corresponding to the graph shown in @fig-equivex) according to @eq-euclid. 


```{r}
#| label: tbl-dist1
#| tbl-cap: Structural Equivalence matrix for an undirected graph.
#| tbl-cap-location: margin

    eudist <- function(x) {
      r <- nrow(x)
      edist <- matrix(0, r, r)
      for (i in 1: r) {
          for (j in 1: r) {
            e <- x[i, ] - x[j, ]
            e <- e^2
            e <- round(sqrt(sum(e)), 1)
            edist[i, j] <- e
          }
        }
    return(edist)
    }
    gr <- simplify(gr)
    a <- matrix(as_adjacency_matrix(gr), nrow = length(V(gr)))
    rownames(a) <- V(gr)$name
    colnames(a) <- V(gr)$name
    d <- eudist(a)
    rownames(d) <- rownames(a)
    colnames(d) <- colnames(a)
    diag(d) <- "--"
    kbl(d, format = "html", align = "c")

```

In the $\mathbf{S}$ matrix, each cell $\mathbf{s}_{ij}$ gives us the Euclidean distance between nodes *i* and *j*. Note that the $\mathbf{S}$ matrix is **symmetric**, meaning that the same information is contained in the lower and upper triangles ($\mathbf{s}_{ij}= \mathbf{s}_{ji}$). This makes sense, because the distance between point *a* and point *b* should be the same as the distance between point *b* and point *a*. In the same way, if you are similar to your friend, then your friend should be equally similar to you!

Checking the values in @tbl-dist1, we can see that structurally equivalent pairs of nodes---are connected to exactly the same others, like nodes *A* and *B* or nodes *C* and *D*---have similarity $\mathbf{d}_{ji}= 0$ in the matrix based on the Euclidian distnce. As nodes become less similar---are connected to different others like nodes *E* and *C*---their Euclidean distance becomes larger.

So, we can say that *structurally similar nodes occupy the same position in the network*. So *A* and *B* occupy the same position, and so do *C* and *D*. 

### Euclidian Distance in Directed Graphs
So far we have considered the case of structural similarity for undirected graphs composed of **symmetric ties**. 

But what happens when the network we are studying is composed of **asymmetric ties**? 

Well, in the directed graph case, we have to distinguish between *two ways* nodes in a graph can be structurally similar to one another based on the directionality of the ties we are considering.

- In the first case, two nodes are structurally similar if they *send ties to the same others*.
- In the second case, two nodes are structurally similar if they *receive ties from the same others*.

These don't necessarily have to go together. One node (*A*) can send ties to the same others as another node (*B*) (and thus *A* and *B* can be structurally similar when it comes to their **out-neighbors**), but receive ties from a different set of others (and thus *A* and *B* can fail to be structurally similar in terms of their **in-neighbors**)

This means that in the directed graph case, two nodes are structurally equivalent if and only if *they send ties to the same others and receive ties from the same others*. 

This added complication means that we have to modify the way we measure structural similarity in the directed graph case when using the euclidian distance. Particularly, to consider the distance between pairs of nodes, we now have to consider both their row-vectors (capturing the pattern of *sending ties*) *and* their column vectors (capturing the patterns of their *receiving ties*) in calculating the distance. 

This means @eq-euclid now turns into:

$$
  d^{Euclidean}_{k,l} = \sqrt{\sum_j (a_{(k)j}-a_{(l)j})^2 + \sum_i (a_{(k)i}-a_{(l)i})^2}
$$ {#eq-deuclid}

The first part of @eq-deuclid inside the square root operator is just like @eq-euclid: $\sum_j (a_{(k)j}-a_{(l)j})^2$. In this case, this tracks the Euclidean distance between the respective *row* vectors of nodes *k* and *l* (which is we sum across the columns *j*), which captures the extent to which they *send* links to the same others. When this part of the equation equals zero, it means *k* and *l* are structurally equivalent when it comes to sending ties.

The second part that is added is $\sum_j (a_{(k)i}-a_{(l)i})^2$, which measures the Euclidean distance between the *column vectors* of nodes *k* and *l* in the **asymmetric adjacency matrix** (which is why we sum across the rows *i*); this captures the extent to which *k* and *l* *receive* ties from the same others. When this part of the equation equals zero, it means *k* and *l* are structurally equivalent when it comes to receiving ties.

```{r}
#| label: fig-direquiv
#| fig-cap: "A directed graph"
#| fig-cap-location: margin
#| fig-height: 10
#| fig-width: 10

    fr <- c("A", "A", "A", "A", "B", "B", "B", "C", "D", "D", "E", "E", "F", "G", "G", "D", "D", "B")
    to <- c("C", "D", "B", "F", "A", "D", "C", "A", "A", "B", "C", "F", "A", "F", "C", "E", "G", "F")
  edge.dat <- data.frame(fr, to)
  node.dat <- data.frame(name = union(fr, to))
  gr <- tbl_graph(edges = edge.dat, nodes = node.dat)
  p <- ggraph(gr, layout = 'tree')
  p <- p + geom_edge_parallel(color = "gray", edge_width = 1.25,
              arrow = arrow(length = unit(5, 'mm')),
              end_cap = circle(10, 'mm'), 
              sep = unit(6, 'mm'))
  p <- p + geom_node_point(aes(x = x, y = y,
                           color = c("a", "b", "c", "d", "e", "c", "e")), size = 24)
  p <- p + geom_node_text(aes(label = name), size = 12, color = "white")
  p <- p + theme_graph() + theme(legend.position = "none")
  p
  
```
Let us look at an example. Consider the graph shown in @fig-direquiv. In the graph, nodes rendered in the same color are structurally equivalent according to @eq-deuclid. The corresponding **asymmetric adjacency matrix** for the graph in @fig-direquiv is shown in @tbl-directed.

```{r}
#| label: tbl-directed
#| tbl-cap: "Asymmetric adjacency matrix for a directed graph."
#| tbl-cap-location: margin

    A <- as.matrix(as_adjacency_matrix(gr))
    diag(A) <- "--"
    kbl(A, format = "html", align = "c") 
```

Let's say we wanted to figure out whether nodes *E* and *G* are structurally equivalent (they are). First, we would compare their respective row-vectors in the adjacency matrix:

```{r}
#| label: tbl-rowvecs
#| tbl-cap: Row vectors for nodes E and G.

    A <- as.matrix(as_adjacency_matrix(gr))
    diag(A) <- "--"
    A <- A[c(5, 7), ]
    kbl(A, format = "html", align = "c") 
```

Then we would compare their respective column vectors:

```{r}
#| label: tbl-colvecs
#| tbl-cap: Column vectors for nodes E and G.

    A <- as.matrix(as_adjacency_matrix(gr))
    diag(A) <- "--"
    A <- A[, c(5, 7)]
    kbl(A, format = "html", align = "c") 
```

And indeed, they are both the same! When we compute the **structural similarity matrix** based on the Euclidean distance for the directed graph shown in @fig-direquiv using @eq-deuclid, we end up with:

```{r}
#| label: tbl-dist2
#| tbl-cap: Structural Equivalence matrix for an undirected graph.
#| tbl-cap-location: margin

    eudist <- function(x) {
      r <- nrow(x)
      edist <- matrix(0, r, r)
      for (i in 1: r) {
          for (j in 1: r) {
            e1 <- x[i, ] - x[j, ]
            e1 <- e1^2
            e1 <- round(sqrt(sum(e1)), 1)
            e2 <- x[, i] - x[, j]
            e2 <- e2^2
            e2 <- round(sqrt(sum(e2)), 1)
            edist[i, j] <- e1 + e2
          }
        }
    return(edist)
    }

    fr <- c("A", "A", "A", "A", "B", "B", "B", "C", "D", "D", "E", "E", "F", "G", "G", "D", "D", "B")
    to <- c("C", "D", "B", "F", "A", "D", "C", "A", "A", "B", "C", "F", "A", "F", "C", "E", "G", "F")
    edge.dat <- data.frame(fr, to)
    node.dat <- data.frame(name = union(fr, to))
    gr <- tbl_graph(edges = edge.dat, nodes = node.dat)
    a <- matrix(as_adjacency_matrix(gr), nrow = length(V(gr)))
    rownames(a) <- V(gr)$name
    colnames(a) <- V(gr)$name
    d <- eudist(a)
    rownames(d) <- rownames(a)
    colnames(d) <- colnames(a)
    diag(d) <- "--"
    kbl(d, format = "html", align = "c")
```

Which tells us that nodes *E* and *G* in @fig-direquiv are structurally equivalent $d_{E,G} = 0$, but so are nodes *C* and *F*. These two pair of nodes send ties to the same out-neighbors and receive ties from the same in-neighbors.^[Can you figure out who those are in the figure?] So, we can say that nodes *E* and *G* occupy one position in the network and nodes *C* and *F* occupy another position. Perhaps if this were an office, and the relation was one of advice, this would reveal two set of actors who have a similar **role** in the office network. 


