# Matrix Operations {#sec-matrixops}

```{r setup, include=FALSE}
    require(ggraph)
    require(tidygraph)
    require(igraph)
    require(kableExtra)
    require(expm)
```

As we saw in the #sec-grtomat, a matrix is a two-dimensional array of numbers. A matrix is two-dimensional because it arranges numbers according to the intersection of a **row dimension** and a **column dimension**. Matrices, therefore are perfect for storing network information, because we can put the nodes in the row and column dimension and then record characteristics of each **dyad** in the network (like whether they are adjacent in the corresponding graph) in matrix form. We can of course record all kinds of other relationships between dyads, like the length of the shortest paths linking them, the number of shortest paths, the number of common neighbors and so forth. 


```{r}
#| label: fig-rel
#| fig-cap: "Undirected graphs representing different social relationships"
#| fig-cap-location: margin
#| fig-subcap:
#|   - "A graph representing hanging out relations (blue)."
#|   - "A graph representing co-working relations (red)." 
#|   - "A graph representing both hanging out and co-working relations (purple)."
#| layout-ncol: 1
#| fig-width: 10
#| fig-height: 10

set.seed(859)

   gr1 <- play_islands(3, 4, m = 1, p_within = 0.8) %>% 
     activate(nodes) %>% 
     mutate(name = toupper(letters[1:12]))
     l <- ggraph(gr1, layout = 'tree')
     l <- as.matrix(l$data[, 1:2])
     p <- ggraph(gr1, layout = l)
     p <- p + geom_edge_link(color = "steelblue", width = 1.15) 
     p <- p + geom_node_point(aes(x = x, y = y), size = 24, color = "tan2") 
     p <- p + geom_node_text(aes(label = name), size = 12, color = "white")
     p <- p + theme_graph() 
     p
     
   gr2 <- play_islands(4, 3, m = 1, p_within = 1) %>% 
     activate(nodes) %>% 
     mutate(name = toupper(letters[1:12]))
     p <- ggraph(gr2, layout = l)
     p <- p + geom_edge_link(color = "firebrick", width = 1.15) 
     p <- p + geom_node_point(aes(x = x, y = y), size = 24, color = "tan2") 
     p <- p + geom_node_text(aes(label = name), size = 12, color = "white")
     p <- p + theme_graph() 
     p
     
     A1 <- as.matrix(as_adjacency_matrix(gr1))
     A2 <- as.matrix(as_adjacency_matrix(gr2))
     A <- A1 * A2
     gr <- graph_from_adjacency_matrix(A)
     p <- ggraph(gr, layout = l)
     p <- p + geom_edge_link(color = "purple", width = 3) 
     p <- p + geom_node_point(aes(x = x, y = y), size = 24, color = "tan2") 
     p <- p + geom_node_text(aes(label = name), size = 12, color = "white")
     p <- p + theme_graph() 
     p
```

```{r}
#| label: tbl-rel
#| tbl-cap: "Adjancency matrices corresponding to networks defined by different relationships." 
#| tbl-subcap:
#|   - "Hanging out relationships."
#|   - "Co-working relationships."
#| layout-ncol: 1


     A1 <- as.matrix(as_adjacency_matrix(gr1))
     diag(A1) <- "--"
     kbl(A1, format = "html", align = "c")  %>% 
     column_spec(1, bold = TRUE) %>% 
     kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
    
     A2 <- as.matrix(as_adjacency_matrix(gr2))
     diag(A2) <- "--"
     kbl(A2, format = "html", align = "c")  %>% 
     column_spec(1, bold = TRUE) %>% 
     kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

Of course, since matrices are just array of *numbers* one powerful thing that we can do is arithmetic and algebraic operations on them. These including summing, multiplying, taking powers of matrices and so forth. In this lesson, we discuss some basic matrix operations and their relevance for the analysis of social networks. 

Our running example will be the pair of graphs shown in @fig-rel. Supppose this is a network of twelve people who work at a (very) small company. We have recorded two types of relationships for each pair of persons: Whether *they hang out together* after work, and whether they get assigned to *work together in team projects* (we will call these "hang out" and "co-working" relations for short).

@fig-rel-1, composed of nodes joined by blue edges, represents hanging out relations; @fig-rel-2 represents co-working relations. The corresponding **adjacency matrices** for the @fig-rel networks are shown in @tbl-rel. @tbl-rel-1 (let's call it $\mathbf{H}$) records hanging out relations and @tbl-rel-2 (let's call it $\mathbf{C}$) records co-working relations.  

## Matrix Addition 
Perhaps the simplest operation we can do with matrices is add them up. To add two matrices, we simply add up the corresponding entries in each cell. In matrix notation:

$$
\mathbf{H} + \mathbf{C} = h_{ij} + c_{ij}
$$ {#eq-matadd}

Where $h_{ij}$ is the corresponding entry for nodes *i* and *j* in the hanging out adjacency matrix $\mathbf{H}$, and $c_{ij}$ is the same entry in the co-working adjacency matrix $\mathbf{C}$. 

Why would we want to do this? Well, if we were studying the network shown in @fig-rel, we might be interested in which dyads have **uniplex** (or single-stranded) relations, and which ones have **multiplex** (or multi-stranded) relations. That is, while some actors in the network *either* hang out together or work together, some of the do *both*. Adding up the adjacency matrices shown in @tbl-rel, will tell us who these are. The result is shown in @tbl-mult.

```{r}
#| label: tbl-mult 
#| tbl-cap: "Uniplex and Multiplex relationship matrix."
#| tbl-cap-location: margin

     A1 <- as.matrix(as_adjacency_matrix(gr1))
     A2 <- as.matrix(as_adjacency_matrix(gr2))
     A <- A1 + A2

     diag(A) <- "--"
     kbl(A, format = "html", align = "c")  %>% 
     column_spec(1, bold = TRUE) %>% 
     kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

@tbl-mult shows that the $BC$ dyad has a multiplex relation (there is a "2" in the corresponding cell entry) and so does the $AC$, $FH$, $GH$, $EF$, and $JL$ dyads. 


## The Matrix Dot Product
Another way of figuring out which pairs of people in a network have multiplex ties is to compute the **matrix dot product** (symbol: $\cdot$). Just like matrix addition, we find the matrix dot product by *multiplying* the corresponding entries in each of the matrices. In matrix format:

$$
\mathbf{H} \mathbf{\cdot} \mathbf{C} = h_{ij} \times c_{ij}
$$ {#eq-matadd}

If we take the dot product of two adjancency matrices like $\mathbf{H}$ and $\mathbf{C}$, then the resulting matrix will have a one in a given cell *only if* $h_{ij} = 1$ and $c_{ij} = 1$. Otherwise, it will have a zero. This means that the dot product of two adjacency matrices will retain *only* the multiplex ties and erase all the other ones. The result of the dot products of the adjancency matrices shown in @tbl-rel is shown in @tbl-dot.  

```{r}
#| label: tbl-dot
#| tbl-cap: "Multiplex relationship matrix."
#| tbl-cap-location: margin

     A1 <- as.matrix(as_adjacency_matrix(gr1))
     A2 <- as.matrix(as_adjacency_matrix(gr2))
     A <- A1 * A2

     diag(A) <- "--"
     kbl(A, format = "html", align = "c")  %>% 
     column_spec(1, bold = TRUE) %>% 
     kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

As we can see, the only dyads that have non-zero entries in @tbl-dot are the multiplex dyads in @tbl-mult. The resulting network, composed of the combined "hanging + co-working" relation is shown in @fig-rel-3. Note that this network is much more sparse than either of the other two, since there's an edge between nodes only when they are adjacent in *both* the @fig-rel-1 and @fig-rel-2 networks. 

## The Matrix Transpose {#sec-trans}
One thing we can do with a matrix is "turn it 90 degrees" so that the rows of the new matrix are equal to the columns of the resulting matrix and the columns of the first matrix equal the rows of the resulting matrix. This is called the **matrix transpose** (symbol: $^T$). 

For instance, if we have a matrix $\mathbf{A}_{4 \times 5}$ of dimensions $4 \times 5$ (four rows and five columns), then the transpose $A^T_{5 \times 4}$ will have five rows and four columns, with the respective entries in each matrix given by the formula:

$$
a_{ij} = a^T_{ji}
$$
That is the number that in the first matrix appears in the $i^{th}$ row and $j^{th}$ column now appears in the transposed version of the matrix in the $j^{th}$ row and $i^{th}$ column. 

An example of a matrix and its tranpose is shown in @tbl-trans.

```{r}
#| label: tbl-trans 
#| tbl-cap: A matrix and its transpose
#| tbl-subcap: 
#|   - "Original Matrix."
#|   - "Transposed Matrix."
#| layout-ncol: 2

A <- matrix(c(3, 7, 4, 5, 2, 4, 9, 6, 3, 5, 5, 3, 2, 4, 4), nrow = 5)
B <- t(A)

kbl(A, align = "c", format = "html") %>%
    kable_styling(full_width = TRUE,
                  bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
    column_spec(1:3, extra_css = "border-right: 0.75px solid;") %>% 
    row_spec(1:5, extra_css = "border-bottom: 0.75px solid;") %>%
    column_spec(1, extra_css = "border-left: 0.75px solid;") %>% 
    row_spec(1, extra_css = "border-top: 0.75px solid;") 



kbl(B, align = "c", format = "html") %>%
    kable_styling(full_width = TRUE,
                  bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
    column_spec(1:5, extra_css = "border-right: 0.75px solid;") %>% 
    row_spec(1:3, extra_css = "border-bottom: 0.75px solid;") %>%
    column_spec(1, extra_css = "border-left: 0.75px solid;") %>% 
    row_spec(1, extra_css = "border-top: 0.75px solid;")
```

So let's check out how the transpose works. The original matrix in @tbl-trans-1 has five rows and three columns. The transposed matrix has three rows and five columns. We can find the same numbers in the original and transposed matrices by switching the rows and columns. Thus, in the original matrix, the number in third row and second column is a six ($a_{32} = 6$). In the transposed version of the matrix, that same six is in second row and third column ($a^T_{23} = 6$). If you check, you'll see that's the case for each number! Thus, the transposed version of a matrix has the same information as the original, it is just that the rows and columns are switched. While this might seem like a totally useless thing to do (or learn) at the moment, we will see that the matrix transpose comes in very handy in the analysis of social networks, and particular in the analysis of **two mode networks** and **cliques**. 

## Matrix Multiplication
Matrix multiplication (symbol: $\times$) is perhaps the more complex of the matrix algebra operations we will cover. It is a bit involved, but relatively easy once you get the hang of it. We will begin with a simple example before doing more complicated stuff. 

### Matrix Multiplication Rules {#sec-multrules}

First, we will let out the basic rules of matrix multiplication:

- You can always multiply two matrices *as long as the number of columns of the first matrix equal the rows of the second matrix*. To check whether this is the case, all you have to do is put the two matrices side by side and list their dimensions. 

$$
\mathbf{A}_{3 \times \mathbf{5}} \times \mathbf{B}_{\mathbf{5} \times 6}
$$
- The two little "fives" in bold are called the **inner dimensions** of the two matrices. The little "three" on the left and the little "six" on the right are called the **outer dimensions**. So another way of stating the first rule of matrix multiplication is that the product of two matrices is defined *as long as their inner dimensions match* when you line them up from left to right.

- When the number of columns of a matrix equal the number of rows of another matrix so that their inner dimensions match we say that the the two matrices are **conformable**. When this is not the case, we say the matrices are **non-conformable**.

- Thus, another way of stating the first rule is that *only the product of conformable matrices is defined*. If the matrices are not conformable then their product is not defined (e.g., there is no answer to the question of what we get if we multiply them!).

- This means that unlike numbers or the matrix dot product, where the order of the two things you are multiplying doesn't matter ($4 \times 3 = 3 \times 4$ or $\mathbf{A} \cdot \mathbf{B} = \mathbf{B} \cdot \mathbf{A}$), in matrix multiplication it *does* matter. Alas, for any two matrices $\mathbf{A}$ and $\mathbf{B}$,

$$
\mathbf{A} \times \mathbf{B} \neq \mathbf{B} \times \mathbf{A}
$$

- When you multiply a matrix times another matrix, the *resulting matrix will have number of rows equal to the number of rows of the first matrix and number of columns equal to the number of columns of the second matrix*. Thus:

$$
\mathbf{A}_{3 \times \mathbf{5}} \times \mathbf{B}_{\mathbf{5} \times 6} = \mathbf{C}_{3 \times 6}
$$  {#eq-matmult0}

- @eq-matmult0 says that the product of a three by five matrix $\mathbf{A}$ (three rows and five columns) times a five by six matrix $\mathbf{B}$ (five rows and six columns) is a third matrix $\mathbf{C}$ with three rows and six columns. Another way of saying this last rule is that the product of two conformable matrices will have dimensions equal to their **outer dimensions**. 

### Multiplying a Matrix Times its Transpose {#sec-trans}
- By definition, as discussed in @sec-trans, the rows of a matrix are equal to the columns of its transpose, and vice versa. The product of a matrix times its transpose and the transpose times the original matrix is always defined, no matter what the dimensions of the original matrix are. Thus,

$$
\mathbf{A} \times \mathbf{A}^T = defined! 
$$

$$
\mathbf{A}^T \times \mathbf{A} = defined!
$$

- When you multiply a matrix times its transpose, the *resulting matrix will be a square matrix with number of rows and columns equal to the number of rows of the original matrix*. For instance, say matrix  $\mathbf{A}_{5 \times 3}$ is of dimensions $5 \times 3$ (like the matrix shown in @tbl-trans-1). Then its transpose $A^T_{3 \times 5}$ will be of dimensions $3 \times 5$ (like the matrix shown in @tbl-trans-2). That means the product of the matrix times its transpose will be:

$$
\mathbf{A}_{5 \times 3} \times \mathbf{A}_{3 \times 5}^T = \mathbf{B}_{5 \times 5}
$$ {#eq-matmult1}

- @eq-matmult1 says that a five by three matrix multiplied by its transposed yields a square matrix $\mathbf{B}$ of dimensions five by five (a square matrix with five rows and five columns). In the same way,

$$
\mathbf{A}_{3 \times 5}^T \times \mathbf{A}_{5 \times 3} = \mathbf{B}_{3 \times 3}
$$ {#eq-matmult2}

- @eq-matmult2 says that the transpose of a five by three matrix multiplied by the original yields a product matrix $\mathbf{B}$ of dimensions three by three (a square matrix with three rows and three columns).

### Matrix Powers

- You can multiply a matrix times itself to get **matrix powers** but only if matrix is a **square matrix** (has the same number of rows and columns). Thus,

$$
\mathbf{A}^2 = \mathbf{A} \times \mathbf{A} 
$$
$$
\mathbf{A}^3 = \mathbf{A} \times \mathbf{A} \times \mathbf{A} 
$$
$$
\mathbf{A}^4 = \mathbf{A} \times \mathbf{A} \times \mathbf{A} \times \mathbf{A}
$$
$$
\mathbf{A}^n = \mathbf{A} \times \mathbf{A} \times \mathbf{A} \times \mathbf{A} \ldots 
$$

- For all square matrices $\mathbf{A}$ of any dimension. Since matrices used to represent social networks, like the **adjacency matrix** are square matrices, that means that you can always find the **powers of an adjacency matrix**.

- *When you multiply a square matrix times another square matrix of the same dimensions, the resulting matrix is of the same dimensions as the original two matrices*. Thus,

$$
\mathbf{A}_{5 \times 5} \times \mathbf{A}_{5 \times 5} = \mathbf{A}^2_{5 \times 5}
$$

### Matrix Multiplication Examples {#sec-matmultex}
Now let's see some examples of how matrix multiplication works. @tbl-prod shows the result of multiplying the matrix shown in @tbl-trans-1 times its transpose, shown in @tbl-trans-2.

```{r}
#| label: tbl-prod 
#| tbl-cap: Matrix resulting from multiplying a matrix times its transpose
#| tbl-cap-location: margin

    B <- A %*% t(A)
    kbl(B, align = "c", format = "html") %>%
    kable_styling(full_width = TRUE,
                  bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
    column_spec(1:5, extra_css = "border-right: 0.75px solid;") %>% 
    row_spec(1:5, extra_css = "border-bottom: 0.75px solid;") %>%
    column_spec(1, extra_css = "border-left: 0.75px solid;") %>% 
    row_spec(1, extra_css = "border-top: 0.75px solid;") 
```

Now where the heck did these numbers come from? Don't panic. We'll break it down. First, let's begin with the number $50$ in cell corresponding to the *first row* and *first column* of @tbl-prod. To find out where this number came from, let's look at the *first row* of @tbl-trans-1, composed of the vector $\{3, 4, 5\}$, and the *first-column* of @tbl-trans-2, composed of the same vector $\{3, 4, 5\}$. Now, the number $50$ comes from the fact that we multiply each of the corresponding entries of the two vectors, and then add them up, as follows:

$$
(3 \times 3) + (4 \times 4) + (5 \times 5) = `r 3*3` + `r 4*4` + `r 5*5` = `r 3*3 + 4*4 + 5*5`
$$

Neat! Now let's see where the number $74$ in the *fourth row* and *second column* of @tbl-prod came from. For that we look at the entries in the *fourth row* of @tbl-trans-1, composed of the vector $\{5, 3, 4\}$ and the *second column* of @tbl-trans-2 composed of the vector $\{7, 9, 3\}$. Like before, we take the first number of the first vector and multiply it by the first number of the second vector, the second number of the first vector and multiply it by the second number of the second vector, and the third number of the first vector and multiply it by the third number of the second vector and add up the results:


$$
(5 \times 7) + (3 \times 9) + (4 \times 3) = `r 5*7` + `r 3*9` + `r 4*3` = `r 5*7 + 3*9 + 4*3`
$$
And we keep on going like this to get each of the twenty five numbers in @tbl-prod (there are twenty five numbers because @tbl-prod has five rows and five columns and five times five equal twenty five). In general terms, the number in the $i^{th}$ row and $j^{th}$ column of @tbl-prod is equal to the sum of the products of the numbers in the $i^{th}$ row of the @tbl-trans-1 and the $j^{th}$ column of @tbl-trans-2. 

Note that the resulting product matrix shown in @tbl-prod is **symmetric**. The same numbers that appear in the upper-triangle also appear in the lower triangle, such that $b_{ij} = b_{ji}$. So once you know the numbers in one of the triangles, you can fill up the numbers in the other one without having to do all the multiplying and adding up!

Now, let's multiply the matrix in @tbl-trans-2 times the matrix in @tbl-trans-1. As the rules of matrix multiplication show, this will result in a matrix of dimensions $3 \times 3$ because @tbl-trans-2 has three rows and $tbl-trans-1 has three columns. This is shown in @tbl-prod2.


```{r}
#| label: tbl-prod2
#| tbl-cap: Matrix resulting from multiplying a matrix times its transpose
#| tbl-cap-location: margin

    B <- t(A) %*% A
    kbl(B, align = "c", format = "html") %>%
    kable_styling(full_width = TRUE,
                  bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
    column_spec(1:3, extra_css = "border-right: 0.75px solid;") %>% 
    row_spec(1:3, extra_css = "border-bottom: 0.75px solid;") %>%
    column_spec(1, extra_css = "border-left: 0.75px solid;") %>% 
    row_spec(1, extra_css = "border-top: 0.75px solid;") 
```

Like before, if we want to figure out where the number $72$ in the third row and first column of @tbl-prod2 came from, we go to the first row of @tbl-trans-2 composed of the vector $\{5, 3, 2, 4, 4\}$ and the first column of @tbl-trans-1, composed of the vector $\{3, 7, 4, 5, 2\}$ match up each number in terms of order, multiplying them and add up the result:

$$
(5 \times 3) + (3 \times 7) + (2 \times 4) + (4 \times 5) + (4 \times 2) = 
$$

$$
`r 5*3` + `r 3*7` + `r 2*4` + `r 4*5` + `r 4*2` = `r 5*3 + 3*7 + 2*4 + 4*5 + 4*2`
$$

```{r}
#| label: tbl-pow
#| tbl-cap: Powers of a matrix. 
#| tbl-subcap: 
#|   - "A matrix."
#|   - "Matrix squared."
#|   - "Matrix cubed."
#| tbl-cap-location: margin 
#| layout-ncol: 3

    A <- matrix(c(0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0), nrow = 4, byrow = TRUE)
    A2 <- A %*% A
    A3 <- A2 %*% A
    
    kbl(A, align = "c", format = "html") %>%
    kable_styling(full_width = TRUE,
                  bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
    column_spec(1:4, extra_css = "border-right: 0.75px solid;") %>% 
    row_spec(1:4, extra_css = "border-bottom: 0.75px solid;") %>%
    column_spec(1, extra_css = "border-left: 0.75px solid;") %>% 
    row_spec(1, extra_css = "border-top: 0.75px solid;") 
    
    kbl(A2, align = "c", format = "html") %>%
    kable_styling(full_width = TRUE,
                  bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
    column_spec(1:4, extra_css = "border-right: 0.75px solid;") %>% 
    row_spec(1:4, extra_css = "border-bottom: 0.75px solid;") %>%
    column_spec(1, extra_css = "border-left: 0.75px solid;") %>% 
    row_spec(1, extra_css = "border-top: 0.75px solid;") 
        
    kbl(A3, align = "c", format = "html") %>%
    kable_styling(full_width = TRUE,
                  bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% 
    column_spec(1:4, extra_css = "border-right: 0.75px solid;") %>% 
    row_spec(1:4, extra_css = "border-bottom: 0.75px solid;") %>%
    column_spec(1, extra_css = "border-left: 0.75px solid;") %>% 
    row_spec(1, extra_css = "border-top: 0.75px solid;") 
```

Matrix powers work the same as regular matrix multiplication, except that we are working on just one matrix not two. So for instance, the number $2$ in the first row and third column of @tbl-pow-2 comes from the numbers in the first row of @tbl-pow-1 ($\{0, 1, 0, 1\}$) and the numbers in the third column of @tbl-pow-1 ($\{0, 1, 1, 1\}$). We line them up, multiplying them, and add them:

$$
(0 \times 1) + (1 \times 1) + (0 \times 1) + (1 \times 1) = 0 + 1 + 0 + 1 = 2
$$
Since we are working with a binary matrix, the product of each of the cell entries will be either a zero (when at least one of the entries is zero) or a one (when both entries are one). 

To get the cubed entries in @tbl-pow-3, we just take @tbl-pow-2 as the first matrix and @tbl-pow-1 as the second matrix, and do matrix multiplication magic. Thus, to get the number $4$ in the third row and fourth column of @tbl-pow-3, we take the numbers in the third row of @tbl-pow-2 $\{2, 1, 2, 2\}$ and the numbers in the fourth column of @tbl-pow-1 $\{1, 0, 1, 0\}$, line them up, multiply them, and add them:

$$
(2 \times 1) + (1 \times 0) + (2 \times 1) + (1 \times 0) = 2 + 0 + 2 + 0 = 4
$$

Pretty easy!

## Matrix Powers and Cohesive Groups
It turns out that matrix powers was one of the earliest applications of formal social network analysis in the social sciences, discovered about the same time by mathematicians and social psychologists Duncan Luce, Albert Perry and Leon Festinger [@luce49, @festinger49]. The basic idea is that when we obtain the **powers of an adjacency matrix** the resulting matrix has an intuitive interpretation in terms of indirect connections between people (see #sec-indirect), which gives us a sense of how strongly related in a formal sense pairs of nodes in the graph are. Let's see an example.


```{r}
#| label: tbl-pows 
#| tbl-cap: An adjancency matrix and its powers.
#| tbl-subcap: 
#|   - Original adjacency matrix.
#|   - Adjacency matrix squared.
#|   - Adjacency matrix cubed.
#|   - Adjacency matrix to the fifth power. 
#| layout-ncol: 1
#| tbl-cap-location: margin

    A1 <- as.matrix(as_adjacency_matrix(gr1))
    A2 <- A1%^%2
    A3 <- A1%^%3

     kbl(A1, format = "html", align = "c")  %>% 
     column_spec(1, bold = TRUE) %>% 
     kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
     
     kbl(A2, format = "html", align = "c")  %>% 
     column_spec(1, bold = TRUE) %>% 
     kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
     
     kbl(A3, format = "html", align = "c")  %>% 
     column_spec(1, bold = TRUE) %>% 
     kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

### The Squared Adjacency Matrix
@tbl-pows-1 shows the adjacency matrix ($\mathbf{A}$) corresponding to the "hangout" network in @fig-rel-1. @tbl-pows-2 shows the entries in $\mathbf{A}^2$ computed like we did earlier in the examples shown in @tbl-pow. What is the meaning of the entries in each cell of @tbl-pows-2? 

Well for the *off-diagonal* entries, the numbers in each cell tell us the number of *indirect connections* (specifically the number of *walks*; see @sec-indirect) of *length two* between each pair of nodes. 

So, for instance, we learn that node $A$ can reach node $B$ via two walks of length two, and can reach nodes $C$, $D$, $G$, and $I$ via one walk of length two. Remember from @sec-indirect that an indirect connection of a given length (in this case two) joins two nodes when it features them as the **end nodes** of the sequence of nodes and edges. Looking back at @fig-rel-1, we can see that the two walks of length two joining nodes $A$ and $B$ are $\{AC, CB\}$ and $\{AD, DB\}$, and that the walks of length two joining $A$ to nodes $\{C, D, G, I\}$ are:

$$
\{AD, DC\}, \{AC, CD\}, \{AC, CG\}, \{AK, KI\}
$$
The *diagonal* entries of @tbl-pows-2, on the other hand, give us the number of walks of length two that begin and end in the same node. Now what is the meaning of this? If you think of it, a walk of length two that starts in a node and goes to another node, and then comes back to the same node is just an **edge** in a symmetric graph! So the diagonals of $\mathbf{A}^2$ just count the number of edges incident to a node, which is the same as the **degree** of each node!

### The Cubed Adjacency Matrix 
@tbl-pows-3 shows the corresponding entries for $\mathbf{A}^3$. What do *these* numbers mean? Well, you may have guessed. For the off-diagonal cells they are the number of walks of *length three* linking each pair of nodes. For instance, the "1" in the cell corresponding to nodes $H$ and $F$ tells us that there is walk of length three linking these two nodes. Looking at @fig-rel-1, we can see that this is given by: $\{HG, GE, EF\}$. 

What do the numbers in the *diagonal cells* of @tbl-pows-3 mean? Well, as you may have guessed, they are actually the number of walks of length three that begin *and* end in that same node! As you may recall from @sec-indirect, this is called a **cycle** of length three. So, the "2" in the diagonal cell entry corresponding to node $A$ tells us that there are two cycles of length three featuring node $A$ as its end nodes. Looking at @fig-rel-1, we can see that these are given by the sequences: $\{AC, CD, DA\}$, $\{AD, DC, DA\}$. In the same way, the number "4" in the diagonal cell for node $C$ tells us that there are four cycles of length three that begin and end in that node. These are given by the sequences: $\{CA, AD, DC\}$, $\{CD, DA, AC\}$, $\{CB, BD, DC\}$, and $\{CD DB, BC\}$. 

Note that the edge sequence corresponding to cycles of length three is the same as that which corresponding to a **clique** of size three. So the diagonals in @tbl-pows-3, counts the *number of cliques of size three* that node belongs to. It actually counts *twice* the number of cliques of size three, because each clique is counted twice, once going in one direction (e.g., $\{CA, AD, DC\}$) and once going in the other direction $\{CD, DA, AC\}$, so in @tbl-pows-3, the diagonal cell divided by two gives us the number of cliques of size three that node belongs to. When a node belongs to no clique, like node $K$ in @fig-rel-1, then it gets a zero entry in the corresponding diagonal cell of $\mathbf{A}^3$. 

```{r}
#| label: fig-pows
#| fig-cap: Graph with weighted edges representing number of indirect connections of length three between nodes
#| fig-cap-location: margin
#| fig-width: 12
#| fig-height: 12

    m <- max(A3)
    n <- diag(A3)^2 + 18
   gr <- graph.adjacency(A3, mode="undirected", weighted=TRUE) %>% 
    as_tbl_graph() 
     p <- ggraph(gr, layout = l)
     p <- p + geom_edge_link(aes(color = weight/m, width = weight/m)) 
     p <- p + geom_node_point(aes(x = x, y = y), color = "tan2", size = 28)
     p <- p + geom_node_text(aes(label = name), size = 14, color = "white")
     p <- p + theme_graph() 
     p <- p + scale_edge_color_steps(low = "grey95", 
                                     high = "steelblue4")
     p <- p + theme(legend.position = "none")
     p
```

@fig-pows shows the same graph as @fig-rel-1, but this time with the connections between nodes in the graph drawn as **weighted edge** with size and color intensity proportional to the entries in @tbl-pows-3 (the larger the number, the thicker and darker the edge), recording the number of walks of length three between each pair of nodes. As we can see, this reveals distinct hangout **cliques** like nodes $\{A, B, C, D\}$ and nodes $\{E, F, G, H\}$ that share multiple indirect connections with one another.

### To Infinity and Beyond!
More generally, for any adjacency matrix $\mathbf{A}$, the $n^{th}$ power of the adjacency matrix gives us a symmetric matrix ($\mathbf{A}^{n}$) whose off-diagonal entries $a^{n}_{ij}$ record the number of walks of length $n$ featuring the $i^{th}$ node as the starting node and the $j^{th}$ node as the end node, and whose diagonal entries $a^{n}_{ii}$ record the the number of cycles of length $n$ that begin and end with that node.

## Matrix Multiplication and Common Neighbors
As we noted in @sec-trans, it is always possible to multiply any matrix times its transpose. Well, the adjacency matrix of a network ($\mathbf{A}$) like @tbl-pows-1 is a matrix. That means it call always be multiplied times its transpose ($\mathbf{A}^T$), resulting in some other matrix $\mathbf{B}$, of the same dimensions as the original adjacency matrix:

$$
\mathbf{A} \times \mathbf{A}^T = \mathbf{B}
$$
The entries corresponding to $\mathbf{B}$ computed according to the matrix multiplication rules laid out in @sec-matmultex, are shown in @tbl-comm.


```{r}
#| label: tbl-comm 
#| tbl-cap: Adjacency matrix multiplied by its transpose.
#| tbl-cap-location: margin

    A <- as.matrix(as_adjacency_matrix(gr1))
    A <- A %*% t(A)
    kbl(A, format = "html", align = "c")  %>% 
    column_spec(1, bold = TRUE) %>% 
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

What are the entries in @tbl-comm? Well, first note one thing, the diagonal entries of @tbl-comm are the same as the diagonal entries of @tbl-pows-2. That means that it is counting the **degree** of each node.

What are the off-diagonal entries of $\mathbf{B}$ though? Let's see where they come from using the rules of matrix multiplication (see @sec-matmultex). Let's take the entry corresponding to nodes $A$ and $C$ (the cell corresponding to the first row and third column) in @tbl-comm. We see there is a "1" there. We know it must have come from matching the numbers in the first row of @tbl-pows-1 with the numbers in the third column of the same table. These are:

```{r}
#| label: tbl-commex 
#| tbl-cap: Entries from an adjacency matrix
#| tbl-subcap: 
#|   - First row entries (node A)
#|   - Third column entries (node C)
#|   - Product of first row entries and third column entries
#| tbl-cap-location: margin

    A <- as.matrix(as_adjacency_matrix(gr1))
    a <- t(A[1, ])
    b <- t(A[, 3])
    c <- a * b

     kbl(a, format = "html", align = "c")  %>% 
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
     
    kbl(b, format = "html", align = "c")  %>% 
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
    
    kbl(c, format = "html", align = "c")  %>% 
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

To get the entry in cell $b_{13}$ of matrix $\mathbf{B}$ all we need to do is multiply each of the zeros and ones in @tbl-commex-1 and @tbl-commex-2 and add up the result. When we do that we get the numbers in @tbl-commex-3. We see that the only lonely "1" in @tbl-commex-3 corresponds to node $D$, note that this happens to be the only *common neighbor* shared by nodes $A$ and $C$. 

So we cracked the mystery of the off-diagonal entries of @tbl-comm! When we multiply an adjacency matrix times its transpose, we end up with a matrix whose *off-diagonal cells count the number of common neighbors shared by the row node and the column node, and who diagonal entries count the total number of neighbors of that node*.



## References {.unnumbered}
