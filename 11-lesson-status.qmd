---
title: "Status"
---


## Advanced: Eigenvector Centrality
### Connectivity Beyond Degree
Sometimes, when it comes to being connected, what matter is not *how many* other people you know. Instead, what is important is being connected to well connected others. Degree-based measures don't capture this intuition, because every connection counts the same, regardless of whether that connection goes to a well-connected other or to a poorly connected other. 

```{r}
#| label: fig-eigen
#| fig-cap: "An undirected graph with degree centrality indicated by node color."
#| fig-cap-location: margin
#| fig-width: 12
#| fig-height: 12

    fr <- c(rep(1, 5), rep(2, 5), rep(3, 5), rep(4, 3), rep(20, 3))
    to <- c(5:9, 10:14, 15:19, 1:3, 5, 21, 22)
    edge.dat <- data.frame(fr, to)
    node.dat <- data.frame(name = toupper(letters[union(fr, to)]))
    node.color <- c(rep("magenta",3), "firebrick", "darkblue", rep("tan1", 14), "firebrick", rep("tan1", 2))
    gr <- tbl_graph(edges = edge.dat, nodes = node.dat, directed = FALSE)
    gr <- as_tbl_graph(simplify(gr)) 
    p <- ggraph(gr, layout = 'kk') 
    p <- p + geom_edge_link(color = "steelblue", width = 1.15) 
    p <- p + geom_node_point(aes(x = x, y = y), color = node.color, size = 22)
    p <- p + geom_node_text(aes(label = name), size = 10, color = "white")
    p <- p + theme_graph()
    p
```

Consider, for instance, the graph shown in @fig-eigen. The corresponding **degree set** of the graph is shown as @tbl-eigendeg. In @fig-eigen, if we go by the simple degree centrality measure, the nodes shown in magenta {*A*, *B*, *C*}, are the best connected ones. Each of these nodes connects to *six* others. The sixteen nodes shown in tan are the least well connected; each of those connect to only *one* neighbor The node shown in dark blue {*T*} is marginally better connected than the tan nodes, featuring *two* connections. Finally, the two nodes in dark red {*D*, *S*} are tied for "in between" degree centrality; each connects to three others.

```{r}
#| label: tbl-eigendeg
#| tbl-cap: "Degree sequence of nodes in an undirected graph."
    d <- degree(gr)
    d <- t(d[order(-d)])
    kbl(d, format = "pipe", align = "c") 
```

Yet, given the previous reflections, there's a lingering suspicion that the best connected node in the graph is actually the red node {*D*}, because even though that node only has three connections, all three go to well connected people. This is different from the other red node {*S*} who also has three connections but they all go to people with a lower degree centrality {*T*, *U*, *V*}. This means that the centrality "tie" between *D* and *S* (based on degree) is misleading. If we somehow weighed *D*'s ties based on the degree of the nodes they connect to, they should count for more than the three ties the *S* has, which go to less well-connected people. 

In the same way, the magenta degree centrality advantage is also misleading, because even though the magenta nodes have a larger number of connections than the red node, these go to less well-connected others. The red node knows three popular people, but the popular people only know other less popular people.

The same reasoning applies to our questioning the presumed advantage that the blue node has over the gray node. Based on degree the blue node is better connected ($C_{Blue}^{DEG} = 3$) than the gray node ($C_{Blk}^{DEG} = 2$), but one of the gray node's connections goes to a well-connected magenta node (who has a connection to the even better-connected red node), so we would like to say that the gray node is actually better-positioned in the network, in the sense of having connections to well-connected others.   

### Getting Centrality From Your Friend's Centrality
All of these considerations lead us to the conclusion that degree centrality may be an incomplete measure of node position, because it only takes into account the number of connection a node has, not who those connections are to. A more general version of centrality would capture that. 

If we had to express it as an equation using the terms of the network's **adjacency matrix**, then the measure of centrality we are looking for, where the centrality of a node *i* is proportional to the centrality of their neighbors *j* would be:

$$
  x_i = \sum_j A_{ij}x_j
$$   {#eq-eigencen}

So what @eq-eigencen) says is that the centrality of node *i* ($x_i$) is just the sum of the centralities ($x_j$) of the nodes they are connected to, as the right-hand side of the sum is only going to be non-zero when $A_{ij} = 1$. But how are we going to figure out the centralities of the other nodes if we don't even node the centrality of the node that we are trying to compute the centrality for? It seems like we are stuck in a circle. To figure out the centrality of node *i* we need to already know the centrality of the other nodes *j*, but we don't know those to begin with!

Phillip Bonacich, a Professor Emeritus in the Sociology Department at UCLA, developed a measure of centrality that solves this conundum and does what we are looking for [@bonacich72]. The measure is based on a **matrix factorization** technique called the **eigenvector decomposition**,^[Also generally known as the [**eigendecomposition**](https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix) of the matrix.] where the matrix in question is the network's **adjacency matrix**. Because of this, this centrality measure carries the (unwieldy) name of **eigenvector centrality**. But don't be scared by the "mathy" name. The concept behind the measure is relatively simple, and it is precisely what we are looking for. 

How does it work? Imagine that we start with regular old degree. This gives us the degree distribution and node ranking shown in @tbl-eigendeg; for each neighbor they have, each node gets one degree "point." Now in the second step, we can give each node extra points for each of the *friends their first step friends have*. In the third step, we can give node even more extra points for each *friend that their first step friends' friends have*, but discount these points a bit, because friends of friends are less important than friends. Then we keep going and give each node points for each *friend that their second step friends of friends' friends have* but discount these even more because friends of friends of friends are obviously less important than friends of friends. We can continue doing this until we can't go anymore (we reach the mathematical limit of the network in terms of how many friends, of friends, of friends, etc. people can have given the graph order and size). 

In his classic paper, Bonacich @bonacich72 showed that the eigendecomposition of the network's adjacency matrix (technically the **eigenvector** corresponding to the largest **eigenvalue** of the adjacency matrix with all positive numbers) give us these scores, without having to go through the whole friends, of friends, of friends, of friends, etc. thing. Matrix Algebra magic!

### Back To Our Example
@tbl-eigencen shows the eigenvector centrality scores for the network shown in @fig-eigen (you may need to scroll horizontally to see all the values). To aid interpretation, eigenvector centrality scores are *normalized* so that the top node receives an eigenvector centrality of 1.0 and then other nodes receive smaller scores proportional to how close their eigenvector centrality score is to the top node. Nodes with the lowest eigenvector centralities in the graph receive scores closer to zero. 

```{r}
#| label: tbl-eigencen
#| tbl-cap: "Eigenvector centralities of nodes in an undirected graph."

    ec <- eigen_centrality(gr, scale = TRUE)$vector
    dc <- degree(gr)
    d <-data.frame(ec, dc)
    cols <- rownames(d)
    d <- t(round(d[order(-dc),]$ec, 2))
    kbl(d, format = "pipe", align = "c", col.names = cols) 
```

As we can see by the scores listed in @tbl-eigencen, the eigenvector centrality procedure recovers our intuitions. The red node *D* comes out on top  ($C_{D}^{EIG} = 1.0$), even though it does not have the biggest degree. This is followed by the three magenta nodes {*A*, *B*, *C*}. Note that not all three magenta nodes have the same eigenvector centrality (even though they have the same the degree), one of them, node *A*, has a larger value, in fact pretty close to the top node *D* ($C_{A}^{EIG} = 0.99$). Well the reason is that *A* has a connection to *T* that *B* and *C* lack, and thus gets extra centrality points from the *T*'s friends {*S*, *U*, *V*}.

In the same way, note that the four tan nodes connected *A*, namely {*E*, *F*, *G*, *H*}, get a slightly larger eigenvector centrality score than the other tan nodes, especially node *E* which gets $C_{E}^{EIG} = 0.42$. The reason is that these tan nodes get a few extra centrality points from the their indirect (two-step) connection to *T* and their three-step connection to *T*'s contacts. Note also that *S*, which is "tied" to *D* in terms of degree ($C_{D, S}^{DEG} = 3$), ends up in the diametrically opposite place from this node in terms of eigenvector centrality, tied with the other tan nodes that only have a single connection ($C_{S}^{EIG} = 0.33$). The reason is that while both *S* and *A* have three connections, for *S* two of those go to nodes with no other friends (so no extra friends of friends points), and the other one goes to *T* who only has two friends (although one of *T*'s friends, *A*, is well-connected. But overall, *S* much less well-connected than *D* if by that we mean being connected to multiple well-connected others.

Finally note that two tan nodes {*U*, *V*} receive the lowest eigenvector centrality scores ($C_{U, V}^{EIG} = 0.07$). As you may have guessed, those are the two tan nodes shown in the rightmost area of the network diagram. The reason for this is that in contrast to the other tan nodes, who are connected to more central magenta nodes, those are connected to the not not-very well-connected *S* (who's connected to the not very well-connected *T*), so they derive very little extra points from those connections.