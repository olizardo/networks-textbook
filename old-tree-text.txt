Although their names a similar, a **tree graph** is not the same as an oriented graph *drawn* as a tree. Instead, a tree graph is a special kind of oriented graph in its own right, obeying a few specific restrictions:
     
     1. Every node is the source of only *one* directed edge and/or the destination of only *one* directed edge. 

1. A node can only send a tie to a node that does not receive ties from any other node. 

1. If a node sends an anti-symmetric link to a second node, and that node sends an anti-symmetric link to a third node, this last node cannot send an anti-symmetric link back to the first node. 

An oriented graph obeying these three restrictions, and thus counting as a tree graph, is shown in @fig-tree. As per conditions (1) and (2), the indegrees of each node in the graph are restricted to be either zero or one. Transmitter nodes have indegree zero but oudegree equal to one or more, like $A$ in @fig-tree ($k_{in}(A) = 0, k_{out}(A) = 3$). Receiver nodes have indegree one but outdegree zero like $\{E, F, G, H, I, J, K, L, M\}$ in @fig-tree. Finally carrier nodes indegree equal to one and outdegree of one or more like $\{B, C, D\}$ in @fig-tree.

As noted, your family tree is an example of a tree graph composed of anti-symmetric kin ties going from people in an older generation to those in a younger generation. For instance, *A* could be your grandmother, and *B*, *C*, and *D* could be her three daughters. If *B* was you mom, then you could be *E* (along with your siblings *F* and *G*) and your cousins *H*, *I*, *J*, *K*, *L*, *M*. 

Given condition (3), a key property of tree graphs composed of anti-symmetric ties is that *they can't have any cycles*. No node that sends a tie to another node can receive a tie back from a third node their neighbor points to! This is the reason why tree graphs are said to to be "acyclic" (they lack cycles). 

In this case, tree graphs are a special case of a directed graph without cycles. These special type of directed graphs are also called **directed acyclic graphs** which is sometimes abbreviated as "DAG." DAGs have applications in certain fields of statistics, causal analysis, and machine learning and have been made famous by [Judea Pearl](http://bayes.cs.ucla.edu/jp_home.html), a Professor of Computer science right here at UCLA.
